app:
  telegram-token: ${TELEGRAM_TOKEN}
  kafka:
    bootstrap-servers: host.docker.internal:9092
    consumer:
      group-id: botMessages
      mappings: edu.java.clientDto.LinkUpdateRequest:edu.java.bot.serviceDto.LinkUpdateRequest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    topicName: botUpdates
    badResponseTopicName: botUpdates_dlq


spring:
  main:
    allow-circular-references: true
  config:
    import: optional:file:.env[.properties]
  application:
    name: bot
  jackson:
    time-zone: UTC
  liquibase:
    enabled: false

server:
  port: 8090

api:
  scrapper:
    baseurl: http://host.docker.internal:8080
    retryPolicy: linear
    retryCount: 3
    linearArg: 3
    codes: INTERNAL_SERVER_ERROR, BAD_GATEWAY, INSUFFICIENT_STORAGE, SERVICE_UNAVAILABLE, GATEWAY_TIMEOUT

springdoc:
  swagger-ui:
    path: /swagger-ui

bucket:
  queryCount: 30

management:
  server:
    port: 8091

  endpoints:
    web:
      path-mapping:
        prometheus: /metrics
      base-path: /
      exposure:
        include: info, health, prometheus
  endpoint:
    health:
      enabled: true
    info:
      enabled: true
    prometheus:
      enabled: true

  prometheus:
    metrics:
      export:
        enabled: true
        step: 1m

  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
